package rnikolaus.gameoflife;

import com.sun.javafx.embed.AbstractEvents;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.Timer;

/**
 *
 * @author rapnik
 */
public class GameOfLifePanel extends javax.swing.JPanel {

    class ShapeSelectPopup extends JPopupMenu {

        public ShapeSelectPopup(final int x, final int y) {

            for (final Shape s : Shape.getAll()) {
                JMenuItem anItem = new JMenuItem(s.getName());
                anItem.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        gameOfLife.addAndTransform(s.getShapeAsDim(), x, y);
                        redraw();
                    }
                });
                add(anItem);
            }

        }
    }

    private int initialPopulation = 3000;
    private int mutationRate;
    private final BufferedImage img;
    private final GameOfLife gameOfLife;
    private static final int XSIZE = 100;
    private static final int YSIZE = 100;
    private int delay = 100;
    private final Timer t = new Timer(delay, new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            gameOfLife.nextGeneration();
            gameOfLife.randomize(getMutationRate());
            redraw();
        }
    });

    private void redraw() {
        gameOfLife.writeToRaster(img.getRaster());
        repaint();
    }

    @Override
    public void paint(Graphics g) {
        g.drawImage(img.getScaledInstance(this.getWidth(), this.getHeight(), Image.SCALE_FAST), 0, 0, null);
    }

    /**
     * Creates new form GameOfLifePanel
     */
    public GameOfLifePanel() {
        initComponents();
        img = new BufferedImage(XSIZE, YSIZE, BufferedImage.TYPE_INT_RGB);
        gameOfLife = new GameOfLife(img.getWidth(), img.getHeight());
        gameOfLife.writeToRaster(img.getRaster());
        t.setRepeats(true);
    }

    public int getInitialPopulation() {
        return initialPopulation;
    }

    public void setInitialPopulation(int initialPopulation) {
        this.initialPopulation = initialPopulation;
    }

    public int getMutationRate() {
        return mutationRate;
    }

    public void setMutationRate(int mutationRate) {
        this.mutationRate = mutationRate;
    }

    public void randomize() {
        gameOfLife.reset();
        gameOfLife.randomize(getInitialPopulation());
        setRunning(true);
    }

    public int getDelay() {
        return delay;
    }

    public void setDelay(int delay) {
        t.setDelay(delay);
        this.delay = delay;
    }

    public boolean isRunning() {
        return t.isRunning();
    }

    public void setRunning(boolean running) {
        boolean old = t.isRunning();
        if (running) {
            t.start();
        } else {
            t.stop();
        }
        firePropertyChange("running", old, running);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setToolTipText("Left click to set or unset a pixel, right click to select from known patterns");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        Point point = evt.getPoint();
        int x = (int) (XSIZE * point.getX() / this.getWidth());
        int y = (int) (YSIZE * point.getY() / this.getHeight());
        if (evt.getButton() == AbstractEvents.MOUSEEVENT_PRIMARY_BUTTON) {

            gameOfLife.flipCell(x, y);
            redraw();
        } else {
            ShapeSelectPopup menu = new ShapeSelectPopup(x, y);
            menu.show(evt.getComponent(), evt.getX(), evt.getY());
            //gameOfLife.addAndTransform(Shape.CELL10.getShapeAsDim(),x, y);
        }

    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
